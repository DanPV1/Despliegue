AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue app Node.j sobre instancia EC2 con ubuntu 20.04
Parameters:
  EC2AMI:
    Description: Imagen del Sistema Operativo
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  KeyName:
    Description: Pair clave valor para acceso SSH
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey
  InstanceType:
    Description: Tamaño de la instancia EC2
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    ConstraintDescription: Tipos de instancia validas
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT7M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_and_enable_cfn_hup
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n"
                  - "action=/opt/aws/bin/cfn-init -v"
                  - "--stack "
                  - Ref: AWS::StackName
                  - " --resource EC2Instance"
                  - " --configsets full_install"
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
                  - "runas=root"
            "/lib/systemd/system/cfn-hup.service":
              content:
                Fn::Join:
                  - ''
                  - - "[Unit]\n"
                    - "Description=cfn-hup daemon\n\n"
                    - "[Service]\n"
                    - "Type=simple\n"
                    - "ExecStart=/opt/aws/bin/cfn-hup\n"
                    - "Restart=always\n\n"
                    - "[Install]\n"
                    - "WantedBy=multi-user.target"
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: SecurityGroup
      KeyName:
        Ref: KeyName
      IamInstanceProfile: 
        "LabInstanceProfile"
      Monitoring: true
      ImageId:
        Ref: EC2AMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /tmp/userdata.log 2>&1
          # Actualizar todas las apps
          apt update -y
          # Instalar unzip
          apt install unzip
          # Instalación CodeDeploy Agent
          apt install ruby-full -y
          apt install wget -y
          cd /home/ubuntu
          wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto > /tmp/logfile
          service codedeploy-agent start
          # Instalar AWS helper scripts de CloudFormation
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets full_install --region ${AWS::Region}
          sleep 1

            apt update
            apt install openjdk-17-jdk-headless -y
            useradd -m -d /opt/tomcat -U -s /bin/false tomcat
            cd /tmp
            wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.18/bin/apache-tomcat-10.1.18.tar.gz
            tar xzvf apache-tomcat-10*tar.gz -C /opt/tomcat --strip-components=1
            chown -R tomcat:tomcat /opt/tomcat/
            chmod -R u+x /opt/tomcat/bin

            content_to_add=$'\n<role rolename="manager-gui" />\n<user username="manager" password="manager12345" roles="manager-gui" />\n\n<role rolename="admin-gui" />\n<user username="admin" password="admin12345" roles="manager-gui,admin-gui" />\n'
            sed -i -e "/<\/tomcat-users>/i $content_to_add" /opt/tomcat/conf/tomcat-users.xml


            file_path="/opt/tomcat/webapps/manager/META-INF/context.xml"
            search_pattern="<Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1\" />"
            replace_text="<!--  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1\>"
            sed -i "s|$search_pattern|$replace_text|" "$file_path"

            file_path_1="nano /opt/tomcat/webapps/host-manager/META-INF/context.xml"
            replace_text_1="<!--  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:>"
            search_pattern_1="<Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1\" />"
            replace_text_1="<!--  <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:>"
            sed -i "s|$search_pattern_1|$replace_text_1|" "$file_path_1"


            #Paso 3
            service_file="/etc/systemd/system/tomcat.service"

            service_content="[Unit]
            Description=Tomcat
            After=network.target

            [Service]
            Type=forking

            User=tomcat
            Group=tomcat

            Environment=\"JAVA_HOME=/usr/lib/jvm/java-1.17.0-openjdk-amd64\"
            Environment=\"JAVA_OPTS=-Djava.security.egd=file:///dev/urandom\"
            Environment=\"CATALINA_BASE=/opt/tomcat\"
            Environment=\"CATALINA_HOME=/opt/tomcat\"
            Environment=\"CATALINA_PID=/opt/tomcat/temp/tomcat.pid\"
            Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"

            ExecStart=/opt/tomcat/bin/startup.sh
            ExecStop=/opt/tomcat/bin/shutdown.sh

            RestartSec=10
            Restart=always

            [Install]
            WantedBy=multi-user.target
            "
            echo "$service_content" | sudo tee "$service_file" > /dev/null
            systemctl daemon-reload
            systemctl start tomcat
            systemctl status tomcat
            systemctl enable tomcat
            ufw allow 8080

          # Esta tiene que serla ultima instrucción
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acesso SSH y web en 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp:
          Ref: SSHLocation
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
Outputs:
  IpAddress:
    Description: Public IP address of the EC23 instance
    Value: !Sub 'http://${EC2Instance.PublicIp}:8080'
    Export:
      Name: IpAddress
